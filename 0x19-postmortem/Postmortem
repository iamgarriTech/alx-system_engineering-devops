
Sure, here is a web stack debugging project issue or an outage that is based on the requirements provided above:-
personally faced issue
Issue Summary
(1)
Duration: 1 hour, 30 minutes (10:00 AM to 11:30 AM PST)
Impact: The company's website was down, preventing users from accessing it. 100% of users were affected.
Root Cause: A memory leak in the Nginx web server caused the server to crash.
(2)
Duration: 2 hours (12:00 PM to 2:00 PM PST)
Impact: The company's e-commerce website was down, preventing users from making purchases. 50% of users were affected.
Root Cause: A misconfiguration in the MySQL database caused the database to become corrupt.
Timeline 
(1)
10:00 AM: A monitoring alert is triggered, indicating that the company's website is down.
10:05 AM: An engineer investigates the issue and determines that the Nginx web server has crashed.
10:10 AM: The engineer restarts the Nginx web server, but it crashes again after a few minutes.
10:20 AM: The engineer suspects that a memory leak is causing the Nginx web server to crash.
10:30 AM: The engineer identifies the memory leak and fixes it.
10:45 AM: The Nginx web server is restarted and the company's website is restored.
(2)
12:00 PM: A monitoring alert is triggered, indicating that the company's e-commerce website is down.
12:05 PM: An engineer investigates the issue and determines that the MySQL database is down.
12:10 PM: The engineer restarts the MySQL database, but it fails to start.
12:20 PM: The engineer suspects that a misconfiguration in the MySQL database is causing the database to fail to start.
12:30 PM: The engineer identifies the misconfiguration and fixes it.
12:45 PM: The MySQL database is restarted and the company's e-commerce website is restored.


Root Cause and Resolution
The root cause of the issue was a memory leak in the Nginx web server. This memory leak caused the Nginx web server to use up all of its memory and crash. The issue was resolved by fixing the memory leak in the Nginx web server code.
The root cause of the issue was a misconfiguration in the MySQL database. The misconfiguration caused the MySQL database to attempt to create a table that already existed. This caused the database to become corrupt and fail to start. The issue was resolved by fixing the misconfiguration in the MySQL database.
Corrective and Preventative Measures
To prevent this issue from happening again, the following corrective and preventative measures will be taken:
(1)
The Nginx web server code will be patched to fix the memory leak.
A monitoring system will be implemented to detect memory leaks in the Nginx web server.
The Nginx web server will be configured with a lower memory limit to prevent it from crashing due to memory exhaustion.
(2)
The MySQL database configuration will be reviewed and updated to ensure that it is correct.
A monitoring system will be implemented to detect misconfigurations in the MySQL database.
A backup of the MySQL database will be created to restore the database in the event of a corruption.
Tasks to Address the Issue
The following tasks will be completed to address the issue:
(1)
Patch the Nginx web server code to fix the memory leak.
Implement a monitoring system to detect memory leaks in the Nginx web server.
Configure the Nginx web server with a lower memory limit.
(2)
Review and update the MySQL database configuration.
Implement a monitoring system to detect misconfigurations in the MySQL database.
Create a backup of the MySQL database.


ALX Ethiopia SE-2023
By:- Engedsaew Haile
engedasewhaile@gmail.com
https://github.com/Engedasew-Haile/
https://medium.com/@engedasewhaile
https://www.linkedin.com/in/engedasew-haile-1306a193/
